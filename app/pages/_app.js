import {
  ErrorBoundary,
  ErrorComponent,
  AuthenticationError,
  AuthorizationError,
  useQueryErrorResetBoundary,
  Head,
} from "blitz"
import LoginForm from "app/auth/components/LoginForm"
import { MantineProvider } from "@mantine/core"
import { NotificationsProvider } from "@mantine/notifications"

import "app/style/styles.css"

export default function App({ Component, pageProps }) {
  const getLayout = Component.getLayout || ((page) => page)

  return (
    <ErrorBoundary
      FallbackComponent={RootErrorFallback}
      onReset={useQueryErrorResetBoundary().reset}
    >
      <Head>
        <title>Classe Mini PWA</title>
        <meta
          name="viewport"
          content="minimum-scale=1, initial-scale=1, width=device-width, shrink-to-fit=no, user-scalable=no, viewport-fit=cover"
        />
        <meta httpEquiv="X-UA-Compatible" content="IE=edge" />

        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="manifest" href="/manifest.json" />
        <meta name="theme-color" content="#317EFB" />
        <link rel="apple-touch-icon" href="/apple-icon.png"></link>
      </Head>
      <MantineProvider
        defaultProps={{
          Button: { color: "#272343" },
        }}
        styles={{
          Button: {
            filled: {
              borderColor: "#eee",
              border: "1px solid #eee",
              backgroundColor: "#ffd803",
              color: "#333",
              "&:hover": {
                backgroundColor: "#ffe914",
              },
            },
            outline: {
              borderRadius: 20,
              color: "#333",
              borderColor: "#ffd803",
              backgroundColor: "#fffffe",
              "&:hover": {
                backgroundColor: "#ffd803",
              },
            },
          },
        }}
      >
        <NotificationsProvider>{getLayout(<Component {...pageProps} />)}</NotificationsProvider>
      </MantineProvider>
    </ErrorBoundary>
  )
}

function RootErrorFallback({ error, resetErrorBoundary }) {
  if (error instanceof AuthenticationError) {
    return <LoginForm onSuccess={resetErrorBoundary} />
  } else if (error instanceof AuthorizationError) {
    return (
      <ErrorComponent
        statusCode={error.statusCode}
        title="Sorry, you are not authorized to access this"
      />
    )
  } else {
    return (
      <ErrorComponent statusCode={error.statusCode || 400} title={error.message || error.name} />
    )
  }
}
